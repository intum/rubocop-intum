# tu wpisujemy tylko różnice w odniesieniu od domyślnych reguł z pliku:
# https://github.com/rubocop-hq/rubocop/blob/master/config/default.yml
# https://github.com/Shopify/ruby-style-guide/blob/v2.8.0/rubocop.yml

inherit_gem:
  rubocop-shopify: rubocop.yml

require:
  - rubocop-minitest
  - rubocop-rails
  - rubocop-performance

Layout/ArgumentAlignment:
  Description: >-
                 Align the arguments of a method call if they span more
                 than one line.
  StyleGuide: '#no-double-indent'
  Enabled: true
  VersionAdded: '0.68'
  VersionChanged: '0.77'
  # Alignment of arguments in multi-line method calls.
  #
  # The `with_first_argument` style aligns the following lines along the same
  # column as the first parameter.
  #
  #     method_call(a,
  #                 b)
  #
  # The `with_fixed_indentation` style aligns the following lines with one
  # level of indentation relative to the start of the line with the method call.
  #
  #     method_call(a,
  #       b)
  EnforcedStyle: with_fixed_indentation
  SupportedStyles:
    - with_first_argument
    - with_fixed_indentation
  # By default, the indentation width from Layout/IndentationWidth is used
  # But it can be overridden by setting this parameter
  IndentationWidth: ~


Layout/FirstHashElementIndentation:
  Description: 'Checks the indentation of the first key in a hash literal.'
  Enabled: true
  VersionAdded: '0.68'
  VersionChanged: '0.77'
  # The value `special_inside_parentheses` means that hash literals with braces
  # that have their opening brace on the same line as a surrounding opening
  # round parenthesis, shall have their first key indented relative to the
  # first position inside the parenthesis.
  #
  # The value `consistent` means that the indentation of the first key shall
  # always be relative to the first position of the line where the opening
  # brace is.
  #
  # The value `align_braces` means that the indentation of the first key shall
  # always be relative to the position of the opening brace.
  EnforcedStyle: consistent
  SupportedStyles:
    - special_inside_parentheses
    - consistent
    - align_braces
  # By default, the indentation width from `Layout/IndentationWidth` is used
  # But it can be overridden by setting this parameter
  IndentationWidth: ~

Layout/SpaceBeforeBlockBraces:
  Description: >-
                 Checks that the left block brace has or doesn't have space
                 before it.
  Enabled: false
  VersionAdded: '0.49'
  EnforcedStyle: space
  SupportedStyles:
    - space
    - no_space
  EnforcedStyleForEmptyBraces: space
  SupportedStylesForEmptyBraces:
    - space
    - no_space
  VersionChanged: '0.52.1'

Layout/SpaceInsideHashLiteralBraces:
  Description: "Use spaces inside hash literal braces - or don't."
  StyleGuide: '#spaces-operators'
  Enabled: true
  VersionAdded: '0.49'
  EnforcedStyle: space
  SupportedStyles:
    - space
    - no_space
    # 'compact' normally requires a space inside hash braces, with the exception
    # that successive left braces or right braces are collapsed together
    - compact
  EnforcedStyleForEmptyBraces: no_space
  SupportedStylesForEmptyBraces:
    - space
    - no_space


Layout/TrailingWhitespace:
  Description: 'Avoid trailing whitespace.'
  StyleGuide: '#no-trailing-whitespace'
  Enabled: true
  VersionAdded: '0.49'
  VersionChanged: '0.83'
  AllowInHeredoc: true # TO CHECK

Metrics/AbcSize:
  Description: >-
                 A calculated magnitude based on number of assignments,
                 branches, and conditions.
  Reference:
    - http://c2.com/cgi/wiki?AbcMetric
    - https://en.wikipedia.org/wiki/ABC_Software_Metric
  Enabled: true
  VersionAdded: '0.27'
  VersionChanged: '0.81'
  # The ABC size is a calculated magnitude, so this number can be an Integer or
  # a Float.
  AllowedMethods: []
  Max: 50


Naming/AccessorMethodName:
  Description: Check the naming of accessor methods for get_/set_.
  StyleGuide: '#accessor_mutator_method_names'
  Enabled: false
  VersionAdded: '0.50'

Naming/PredicateName:
  Description: 'Check the names of predicate methods.'
  StyleGuide: '#bool-methods-qmark'
  Enabled: false
  VersionAdded: '0.50'
  VersionChanged: '0.77'
  # Predicate name prefixes.
  NamePrefix:
    - is_
    - has_
    - have_
  # Predicate name prefixes that should be removed.
  ForbiddenPrefixes:
    - is_
    - has_
    - have_
  # Predicate names which, despite having a forbidden prefix, or no `?`,
  # should still be accepted
  AllowedMethods:
    - is_a?
  # Method definition macros for dynamically generated methods.
  MethodDefinitionMacros:
    - define_method
    - define_singleton_method
  # Exclude Rspec specs because there is a strong convention to write spec
  # helpers in the form of `have_something` or `be_something`.
  Exclude:
    - 'spec/**/*'


Style/AndOr:
  Description: 'Use &&/|| instead of and/or.'
  StyleGuide: '#no-and-or-or'
  Enabled: true
  VersionAdded: '0.9'
  VersionChanged: '0.25'
  # Whether `and` and `or` are banned only in conditionals (conditionals)
  # or completely (always).
  EnforcedStyle: always
  SupportedStyles:
    - always
    - conditionals


Style/AsciiComments:
  Description: 'Use only ascii symbols in comments.'
  StyleGuide: '#english-comments'
  Enabled: false
  VersionAdded: '0.9'
  VersionChanged: '0.52'
  AllowedChars: []

Style/BlockDelimiters:
  Description: >-
                Avoid using {...} for multi-line blocks (multiline chaining is
                always ugly).
                Prefer {...} over do...end for single-line blocks.
  StyleGuide: '#single-line-blocks'
  Enabled: true
  VersionAdded: '0.30'
  VersionChanged: '0.35'
  EnforcedStyle: line_count_based
  SupportedStyles:
    # The `line_count_based` style enforces braces around single line blocks and
    # do..end around multi-line blocks.
    - line_count_based
    # The `semantic` style enforces braces around functional blocks, where the
    # primary purpose of the block is to return a value and do..end for
    # multi-line procedural blocks, where the primary purpose of the block is
    # its side-effects. Single-line procedural blocks may only use do-end,
    # unless AllowBracesOnProceduralOneLiners has a truthy value (see below).
    #
    # This looks at the usage of a block's method to determine its type (e.g. is
    # the result of a `map` assigned to a variable or passed to another
    # method) but exceptions are permitted in the `ProceduralMethods`,
    # `FunctionalMethods` and `AllowedMethods` sections below.
    - semantic
    # The `braces_for_chaining` style enforces braces around single line blocks
    # and do..end around multi-line blocks, except for multi-line blocks whose
    # return value is being chained with another method (in which case braces
    # are enforced).
    - braces_for_chaining
    # The `always_braces` style always enforces braces.
    - always_braces
  ProceduralMethods:
    # Methods that are known to be procedural in nature but look functional from
    # their usage, e.g.
    #
    #   time = Benchmark.realtime do
    #     foo.bar
    #   end
    #
    # Here, the return value of the block is discarded but the return value of
    # `Benchmark.realtime` is used.
    - benchmark
    - bm
    - bmbm
    - create
    - each_with_object
    - measure
    - new
    - realtime
    - tap
    - with_object
  FunctionalMethods:
    # Methods that are known to be functional in nature but look procedural from
    # their usage, e.g.
    #
    #   let(:foo) { Foo.new }
    #
    # Here, the return value of `Foo.new` is used to define a `foo` helper but
    # doesn't appear to be used from the return value of `let`.
    - let
    - let!
    - subject
    - watch
  AllowedMethods:
    # Methods that can be either procedural or functional and cannot be
    # categorised from their usage alone, e.g.
    #
    #   foo = lambda do |x|
    #     puts "Hello, #{x}"
    #   end
    #
    #   foo = lambda do |x|
    #     x * 100
    #   end
    #
    # Here, it is impossible to tell from the return value of `lambda` whether
    # the inner block's return value is significant.
    - lambda
    - proc
    - it
    - json
    - js
  # The AllowBracesOnProceduralOneLiners option is ignored unless the
  # EnforcedStyle is set to `semantic`. If so:
  #
  # If AllowBracesOnProceduralOneLiners is unspecified, or set to any
  # falsey value, then semantic purity is maintained, so one-line
  # procedural blocks must use do-end, not braces.
  #
  #   # bad
  #   collection.each { |element| puts element }
  #
  #   # good
  #   collection.each do |element| puts element end
  #
  # If AllowBracesOnProceduralOneLiners is set to any truthy value,
  # then one-line procedural blocks may use either style.
  #
  #   # good
  #   collection.each { |element| puts element }
  #
  #   # also good
  #   collection.each do |element| puts element end
  AllowBracesOnProceduralOneLiners: false
  # The BracesRequiredMethods overrides all other configurations except
  # AllowedMethods. It can be used to enforce that all blocks for specific
  # methods use braces. For example, you can use this to enforce Sorbet
  # signatures use braces even when the rest of your codebase enforces
  # the `line_count_based` style.
  BracesRequiredMethods: []

Style/ClassAndModuleChildren:
  Description: 'Checks style of children classes and modules.'
  StyleGuide: '#namespace-definition'
  # Moving from compact to nested children requires knowledge of whether the
  # outer parent is a module or a class. Moving from nested to compact requires
  # verification that the outer parent is defined elsewhere. Rubocop does not
  # have the knowledge to perform either operation safely and thus requires
  # manual oversight.
  SafeAutoCorrect: false
  Enabled: false
  VersionAdded: '0.19'
  #
  # Basically there are two different styles:
  #
  # `nested` - have each child on a separate line
  #   class Foo
  #     class Bar
  #     end
  #   end
  #
  # `compact` - combine definitions as much as possible
  #   class Foo::Bar
  #   end
  #
  # The compact style is only forced, for classes or modules with one child.
  EnforcedStyle: nested
  SupportedStyles:
    - nested
    - compact

Style/CommentedKeyword:
  Description: 'Do not place comments on the same line as certain keywords.'
  Enabled: false
  VersionAdded: '0.51'

Style/ConditionalAssignment:
  Description: >-
                 Use the return value of `if` and `case` statements for
                 assignment to a variable and variable comparison instead
                 of assigning that variable inside of each branch.
  Enabled: false
  VersionAdded: '0.36'
  VersionChanged: '0.47'
  EnforcedStyle: assign_to_condition
  SupportedStyles:
    - assign_to_condition
    - assign_inside_condition
  # When configured to `assign_to_condition`, `SingleLineConditionsOnly`
  # will only register an offense when all branches of a condition are
  # a single line.
  # When configured to `assign_inside_condition`, `SingleLineConditionsOnly`
  # will only register an offense for assignment to a condition that has
  # at least one multiline branch.
  SingleLineConditionsOnly: true
  IncludeTernaryExpressions: true

Style/Documentation:
  Description: 'Document classes and non-namespace modules.'
  Enabled: false
  VersionAdded: '0.9'
  Exclude:
    - 'spec/**/*'
    - 'test/**/*'


Style/EmptyMethod:
  Description: 'Checks the formatting of empty method definitions.'
  StyleGuide: '#no-single-line-methods'
  Enabled: true
  VersionAdded: '0.46'
  EnforcedStyle: expanded
  SupportedStyles:
    - compact
    - expanded


Style/FormatString:
  Description: 'Enforce the use of Kernel#sprintf, Kernel#format or String#%.'
  StyleGuide: '#sprintf'
  Enabled: true
  VersionAdded: '0.19'
  VersionChanged: '0.49'
  EnforcedStyle: percent
  SupportedStyles:
    - format
    - sprintf
    - percent


Style/FormatStringToken:
  Description: 'Use a consistent style for format string tokens.'
  Enabled: true
  EnforcedStyle: template
  SupportedStyles:
    # Prefer tokens which contain a sprintf like type annotation like
    # `%<name>s`, `%<age>d`, `%<score>f`
    - annotated
    # Prefer simple looking "template" style tokens like `%{name}`, `%{age}`
    - template
    - unannotated
  # `MaxUnannotatedPlaceholdersAllowed` defines the number of `unannotated`
  # style token in a format string to be allowed when enforced style is not
  # `unannotated`.
  MaxUnannotatedPlaceholdersAllowed: 1
  VersionAdded: '0.49'
  VersionChanged: '1.0'


Style/FrozenStringLiteralComment:
  Description: >-
                 Add the frozen_string_literal comment to the top of files
                 to help transition to frozen string literals by default.
  Enabled: false
  VersionAdded: '0.36'
  VersionChanged: '0.79'
  EnforcedStyle: always
  SupportedStyles:
    # `always` will always add the frozen string literal comment to a file
    # regardless of the Ruby version or if `freeze` or `<<` are called on a
    # string literal. It is possible that this will create errors.
    - always
    # `always_true` will add the frozen string literal comment to a file,
    # similarly to the `always` style, but will also change any disabled
    # comments (e.g. `# frozen_string_literal: false`) to be enabled.
    - always_true
    # `never` will enforce that the frozen string literal comment does not
    # exist in a file.
    - never
  SafeAutoCorrect: false


Style/IfUnlessModifier:
  Description: >-
                 Favor modifier if/unless usage when you have a
                 single-line body.
  StyleGuide: '#if-as-a-modifier'
  Enabled: false
  VersionAdded: '0.9'
  VersionChanged: '0.30'

Style/MultilineMethodSignature:
  Description: 'Avoid multi-line method signatures.'
  Enabled: true
  VersionAdded: '0.59'

Style/MutableConstant:
  Description: 'Do not assign mutable objects to constants.'
  Enabled: false
  VersionAdded: '0.34'
  VersionChanged: '0.65'
  EnforcedStyle: literals
  SupportedStyles:
    # literals: freeze literals assigned to constants
    # strict: freeze all constants
    # Strict mode is considered an experimental feature. It has not been updated
    # with an exhaustive list of all methods that will produce frozen objects so
    # there is a decent chance of getting some false positives. Luckily, there is
    # no harm in freezing an already frozen object.
    - literals
    - strict


Style/NegatedIf:
  Description: >-
                 Favor unless over if for negative conditions
                 (or control flow or).
  StyleGuide: '#unless-for-negatives'
  Enabled: false
  VersionAdded: '0.20'
  VersionChanged: '0.48'
  EnforcedStyle: both
  SupportedStyles:
    # both: prefix and postfix negated `if` should both use `unless`
    # prefix: only use `unless` for negated `if` statements positioned before the body of the statement
    # postfix: only use `unless` for negated `if` statements positioned after the body of the statement
    - both
    - prefix
    - postfix

Style/NilComparison:
  Description: 'Prefer x.nil? to x == nil.'
  StyleGuide: '#predicate-methods'
  Enabled: false
  VersionAdded: '0.12'
  VersionChanged: '0.59'
  EnforcedStyle: predicate
  SupportedStyles:
    - predicate
    - comparison

Style/NumericLiterals:
  Description: >-
                 Add underscores to large numeric literals to improve their
                 readability.
  StyleGuide: '#underscores-in-numerics'
  Enabled: false
  VersionAdded: '0.9'
  VersionChanged: '0.48'
  MinDigits: 5
  Strict: false


Style/NumericPredicate:
  Description: >-
                 Checks for the use of predicate- or comparison methods for
                 numeric comparisons.
  StyleGuide: '#predicate-methods'
  Safe: false
  # This will change to a new method call which isn't guaranteed to be on the
  # object. Switching these methods has to be done with knowledge of the types
  # of the variables which rubocop doesn't have.
  SafeAutoCorrect: false
  Enabled: true
  VersionAdded: '0.42'
  VersionChanged: '0.59'
  EnforcedStyle: comparison
  SupportedStyles:
    - predicate
    - comparison
  AllowedMethods: []
  # Exclude RSpec specs because assertions like `expect(1).to be > 0` cause
  # false positives.
  Exclude:
    - 'spec/**/*'

Style/PercentLiteralDelimiters:
  Description: 'Use `%`-literal delimiters consistently.'
  StyleGuide: '#percent-literal-braces'
  Enabled: true
  VersionAdded: '0.19'
  # Specify the default preferred delimiter for all types with the 'default' key
  # Override individual delimiters (even with default specified) by specifying
  # an individual key
  PreferredDelimiters:
    default: '{}'
    '%i': '[]'
    '%I': '[]'
    '%r': '{}'
    '%w': '[]'
    '%W': '[]'
  VersionChanged: '0.48.1'

Style/RedundantSelf:
  Description: "Don't use self where it's not needed."
  StyleGuide: '#no-self-unless-required'
  Enabled: false
  VersionAdded: '0.10'
  VersionChanged: '0.13'


Style/StringLiterals:
  EnforcedStyle: double_quotes

# Style/StringLiterals:
#   Description: 'Checks if uses of quotes match the configured preference.'
#   StyleGuide: '#consistent-string-literals'
#   Enabled: true
#   VersionAdded: '0.9'
#   VersionChanged: '0.36'
#   EnforcedStyle: single_quotes
#   SupportedStyles:
#     - single_quotes
#     - double_quotes
#   # If `true`, strings which span multiple lines using `\` for continuation must
#   # use the same type of quotes on each line.
#   ConsistentQuotesInMultiline: false


Style/SymbolArray:
  Description: 'Use %i or %I for arrays of symbols.'
  StyleGuide: '#percent-i'
  Enabled: false
  VersionAdded: '0.9'
  VersionChanged: '0.49'
  EnforcedStyle: percent
  MinSize: 2
  SupportedStyles:
    - percent
    - brackets

Style/SymbolProc:
  Description: 'Use symbols as procs instead of blocks when possible.'
  Enabled: false
  Safe: false
  VersionAdded: '0.26'
  VersionChanged: '0.64'
  # A list of method names to be ignored by the check.
  # The names should be fairly unique, otherwise you'll end up ignoring lots of code.
  AllowedMethods:
    - respond_to
    - define_method

Style/TrailingCommaInArrayLiteral:
  Description: 'Checks for trailing comma in array literals.'
  StyleGuide: '#no-trailing-array-commas'
  Enabled: true
  VersionAdded: '0.53'
  # If `comma`, the cop requires a comma after the last item in an array,
  # but only when each item is on its own line.
  # If `consistent_comma`, the cop requires a comma after the last item of all
  # non-empty, multiline array literals.
  EnforcedStyleForMultiline: consistent_comma
  SupportedStylesForMultiline:
    - comma
    - consistent_comma
    - no_comma

Style/TrailingCommaInHashLiteral:
  Description: 'Checks for trailing comma in hash literals.'
  Enabled: true
  # If `comma`, the cop requires a comma after the last item in a hash,
  # but only when each item is on its own line.
  # If `consistent_comma`, the cop requires a comma after the last item of all
  # non-empty, multiline hash literals.
  EnforcedStyleForMultiline: consistent_comma
  SupportedStylesForMultiline:
    - comma
    - consistent_comma
    - no_comma
  VersionAdded: '0.53'

Style/WordArray:
  Description: 'Use %w or %W for arrays of words.'
  StyleGuide: '#percent-w'
  Enabled: true
  VersionAdded: '0.9'
  VersionChanged: '0.36'
  EnforcedStyle: brackets
  SupportedStyles:
    # percent style: %w(word1 word2)
    - percent
    # bracket style: ['word1', 'word2']
    - brackets
  # The `MinSize` option causes the `WordArray` rule to be ignored for arrays
  # smaller than a certain size. The rule is only applied to arrays
  # whose element count is greater than or equal to `MinSize`.
  MinSize: 0
  # The regular expression `WordRegex` decides what is considered a word.
  WordRegex: !ruby/regexp '/\A(?:\p{Word}|\p{Word}-\p{Word}|\n|\t)+\z/'

Style/GuardClause:
  Description: 'Check for conditionals that can be replaced with guard clauses.'
  StyleGuide: '#no-nested-conditionals'
  Enabled: true
  VersionAdded: '0.20'
  VersionChanged: '0.22'
  # `MinBodyLength` defines the number of lines of the a body of an `if` or `unless`
  # needs to have to trigger this cop
  MinBodyLength: 4

Lint/DuplicateBranch:
  Description: Checks that there are no repeated bodies within `if/unless`, `case-when` and `rescue` constructs.
  Enabled: false
  VersionAdded: '1.3'

Style/PerlBackrefs:
  Description: 'Avoid Perl-style regex back references.'
  StyleGuide: '#no-perl-regexp-last-matchers'
  Enabled: false
  VersionAdded: '0.13'

Style/ZeroLengthPredicate:
  Description: 'Use #empty? when testing for objects of length 0.'
  Enabled: false
  Safe: false
  VersionAdded: '0.37'
  VersionChanged: '0.39'

Style/AccessModifierDeclarations:
  Description: 'Checks style of how access modifiers are used.'
  Enabled: false
  VersionAdded: '0.57'
  VersionChanged: '0.81'
  EnforcedStyle: inline
  SupportedStyles:
    - inline
    - group
  AllowModifiersOnSymbols: true
Style/MapToHash:
  Enabled: false

# Style/RegexpLiteral:
#   Description: 'Use / or %r around regular expressions.'
#   StyleGuide: '#percent-r'
#   Enabled: true
#   VersionAdded: '0.9'
#   VersionChanged: '0.30'
#   EnforcedStyle: slashes
#   # slashes: Always use slashes.
#   # percent_r: Always use `%r`.
#   # mixed: Use slashes on single-line regexes, and `%r` on multi-line regexes.
#   SupportedStyles:
#     - slashes
#     - percent_r
#     - mixed
#   # If `false`, the cop will always recommend using `%r` if one or more slashes
#   # are found in the regexp string.
#   AllowInnerSlashes: false


###### RAILS ######
###### RAILS ######
###### RAILS ######
###### RAILS ######

Rails:
  Enabled: true

Rails/UnknownEnv:
    Environments:
      - production
      - development
      - test

Rails/FilePath:
  Enabled: false

Rails/Delegate:
  Enabled: false

Rails/NegateInclude:
  Enabled: false

Rails/SkipsModelValidations:
  Enabled: false

# Rails/DynamicFindBy:
#   Enabled: true
#   SafeAutoCorrect: false

## MINITEST

Minitest/TestMethodName:
  Enabled: false

Minitest/AssertWithExpectedArgument:
  Enabled: false

Minitest/MultipleAssertions:
  Enabled: false

## PERFORMANCE

Performance/CollectionLiteralInLoop:
  Enabled: false

Naming/InclusiveLanguage:
  Enabled: false

Rails/ReversibleMigration:
  Enabled: false

# ruby 3.1 (na razie wyłączamy)

Style/HashSyntax:
  EnforcedShorthandSyntax: 'either'

Naming/BlockForwarding:
  Enabled: false

Minitest/AssertPredicate:
  Enabled: false

# TODO: do włączenia
Rails/I18nLocaleTexts:
  Enabled: false

Style/FetchEnvVar:
  Enabled: false

Layout/ParameterAlignment:
  EnforcedStyle: with_fixed_indentation

Style/MethodCallWithArgsParentheses:
  Enabled: false
  # AllowedMethods:
  # - require
  # - require_relative
  # - require_dependency
  # - yield
  # - raise
  # - puts
  # Exclude:
  # - "/**/Gemfile"

Style/ClassMethodsDefinitions:
  EnforcedStyle: def_self
  Enabled: true